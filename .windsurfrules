# Windsurf Rules for Angular Template

# Ignore build artifacts and dependencies
ignore_patterns:
  - "node_modules/"
  - "dist/"
  - ".angular/"
  - "coverage/"
  - ".husky/"
  - ".git/"

# Configure code analysis
code_analysis:
  # Use existing linting configuration
  use_eslint: true
  eslint_config_path: ".eslintrc.json"

  # Use existing formatting configuration
  use_prettier: true
  prettier_config_path: ".prettierrc"

  # TypeScript configuration
  typescript:
    tsconfig_path: "tsconfig.json"

# Build and test configuration
build:
  command: "npm run build"

test:
  command: "npm run test:ci"

lint:
  command: "npm run lint"

format:
  command: "npm run format"

# Angular-specific settings
angular:
  version: 19
  use_strict_mode: true
  component_style: "standalone"

# Editor settings
editor:
  tab_size: 2
  insert_spaces: true
  trim_trailing_whitespace: true
  insert_final_newline: true

# Git hooks (already configured via husky)
git:
  use_husky: true
  enforce_conventional_commits: true

# Angular 19 and TypeScript Best Practices
best_practices:
  angular:
    # Component best practices
    components:
      - "Use OnPush change detection strategy for better performance"
      - "Keep components small and focused on a single responsibility"
      - "Use standalone components when possible"
      - "Implement proper lifecycle hooks cleanup"
      - "Use @Input() setters for input validation"

    # Service best practices
    services:
      - "Use providedIn: 'root' for singleton services"
      - "Leverage Angular's DI system properly"
      - "Use proper RxJS operators for async operations"
      - "Implement proper error handling for HTTP requests"

    # Performance
    performance:
      - "Lazy load feature modules"
      - "Use trackBy with *ngFor directives"
      - "Implement virtual scrolling for large lists"
      - "Optimize bundle size with proper code splitting"

  typescript:
    # TypeScript best practices
    general:
      - "Use strict type checking"
      - "Avoid any type when possible"
      - "Use interfaces for data models"
      - "Leverage TypeScript's utility types"
      - "Use readonly for immutable properties"
      - "Implement proper error handling with typed errors"

    # Functional programming
    functional:
      - "Use pure functions when possible"
      - "Leverage immutability patterns"
      - "Use optional chaining and nullish coalescing"

    # Testing
    testing:
      - "Write unit tests for business logic"
      - "Use TestBed for Angular component testing"
      - "Implement E2E tests for critical user flows"
      - "Mock external dependencies in tests"

# Signal Store Configuration
signal_store:
  enabled: true
  structure:
    # Define global store organization
    pattern: "feature-based"  # Options: feature-based, domain-based, entity-based
    directory: "src/app/store"

  # Signal store best practices
  best_practices:
    - "Create typed signal interfaces for all store slices"
    - "Implement immutable update patterns"
    - "Use computed signals for derived state"
    - "Leverage effect signals for side effects"
    - "Implement proper error handling in signal updates"
    - "Create selector functions for complex state queries"

  # Architecture guidelines
  architecture:
    - "Separate state into domain-specific store slices"
    - "Use injectable store services with providedIn: 'root'"
    - "Implement facade pattern for complex store interactions"
    - "Create action creators for state mutations"
    - "Document state shape and transitions"

  # Performance considerations
  performance:
    - "Minimize signal updates for performance"
    - "Use toSignal() for RxJS to Signal conversions"
    - "Implement proper memoization for expensive computations"
    - "Consider using untracked() for non-reactive operations"

# State management (enhanced)
state_management:
  - "Use signals as the primary state management solution"
  - "Implement a centralized signal store for global state"
  - "Use input signals for component-level reactivity"
  - "Leverage computed signals for derived state"
  - "Create effect signals for side effects and external integrations"
  - "Implement proper unsubscribe patterns for any RxJS observables"
  - "Consider NgRx only for very complex state management needs"

# Accessibility
accessibility:
  - "Follow WCAG 2.1 AA standards"
  - "Use semantic HTML elements"
  - "Implement proper ARIA attributes when needed"
  - "Ensure keyboard navigation works properly"
  - "Test with screen readers"
  - "Maintain sufficient color contrast"

# Internationalization
i18n:
  enabled: true
  strategy: "angular-i18n"  # or "ngx-translate" or "custom"
  default_locale: "en-US"
  supported_locales:
    - "en-US"
    - "es-ES"
    - "fr-FR"
  best_practices:
    - "Use Angular's i18n system for static text"
    - "Implement locale-specific formatting for dates, numbers, and currencies"
    - "Consider right-to-left (RTL) language support"
    - "Extract all user-facing strings for translation"

# Security
security:
  - "Implement proper CSRF protection"
  - "Use Angular's built-in XSS protection"
  - "Sanitize user inputs"
  - "Implement proper authentication and authorization"
  - "Follow OWASP top 10 security guidelines"
  - "Avoid storing sensitive information in localStorage"

# CI/CD Configuration
ci_cd:
  provider: "github-actions"  # or "gitlab-ci", "jenkins", etc.
  strategies:
    - "Run tests on every pull request"
    - "Enforce code coverage thresholds"
    - "Deploy to staging automatically after merge to develop"
    - "Run security scans as part of the pipeline"

# Performance Monitoring
performance_monitoring:
  enabled: true
  metrics:
    - "First Contentful Paint (FCP)"
    - "Largest Contentful Paint (LCP)"
    - "Time to Interactive (TTI)"
    - "Total Blocking Time (TBT)"
    - "Cumulative Layout Shift (CLS)"
  tools:
    - "Lighthouse CI"
    - "Web Vitals"

# Error Handling and Logging
error_handling:
  strategy: "global-error-handler"
  logging:
    level: "warn"  # Options: debug, info, warn, error
    persist: true
    anonymize_user_data: true

# Documentation
documentation:
  code:
    - "Use JSDoc comments for public APIs"
    - "Document complex algorithms and business logic"
    - "Keep comments up-to-date with code changes"
  architecture:
    - "Maintain architecture decision records (ADRs)"
    - "Document component relationships and data flow"
    - "Update diagrams when architecture changes"

# UI-Kit Component Recommendations
ui_kit:
  directory: "src/app/shared/ui-kit"
  structure:
    - "Organize components by type (buttons, inputs, layout, etc.)"
    - "Co-locate component files (component, styles, tests, stories)"
    - "Use index.ts files for clean exports"

  # Component architecture
  architecture:
    - "Use standalone components with OnPush change detection"
    - "Implement input signals instead of @Input decorators"
    - "Create component interfaces for props/inputs"
    - "Provide sensible defaults for all inputs"
    - "Document all public APIs with JSDoc comments"
    - "Implement proper cleanup in ngOnDestroy"

  # Design principles
  design_principles:
    - "Follow atomic design principles (atoms, molecules, organisms)"
    - "Maintain consistent styling across components"
    - "Support light and dark themes"
    - "Implement responsive design patterns"
    - "Ensure all components are accessible"

  # Component features
  component_features:
    - "Support various variants (primary, secondary, success, etc.)"
    - "Implement size options (small, medium, large)"
    - "Support icon integration with position control"
    - "Include loading states where appropriate"
    - "Add badge support for notification indicators"
    - "Implement proper ARIA attributes for accessibility"
    - "Support full-width options for responsive layouts"
    - "Allow custom class injection for specific styling needs"

  # Testing requirements
  testing:
    - "Create comprehensive unit tests for all components"
    - "Test all component variants and states"
    - "Implement accessibility tests"
    - "Test component interactions and events"
    - "Verify proper signal propagation"

# Storybook Stories Configuration
storybook:
  enabled: true
  directory: ".storybook"

  # Story organization
  organization:
    - "Co-locate stories with components"
    - "Use consistent naming convention: component-name.stories.ts"
    - "Organize stories by component category in Storybook sidebar"
    - "Group related components together"

  # Story structure
  structure:
    - "Create a default story showcasing the basic component"
    - "Add stories for each component variant"
    - "Include stories for different component sizes"
    - "Demonstrate all component states (normal, hover, active, disabled, loading)"
    - "Show examples with and without icons"
    - "Demonstrate badge functionality where applicable"
    - "Include responsive behavior examples"

  # Documentation
  documentation:
    - "Use the autodocs tag for automatic documentation generation"
    - "Document all component props with argTypes"
    - "Include detailed descriptions for each story"
    - "Add component usage guidelines in the docs"
    - "Document accessibility considerations"
    - "Include code examples for common use cases"

  # Controls and interactions
  controls:
    - "Configure interactive controls for all component inputs"
    - "Set appropriate control types (select, boolean, text, etc.)"
    - "Define sensible control ranges and options"
    - "Group related controls together"
    - "Add actions for event handlers"

  # Best practices
  best_practices:
    - "Keep stories simple and focused on one aspect of the component"
    - "Use decorators for common story setup"
    - "Implement proper TypeScript typing for all stories"
    - "Test stories in both light and dark themes"
    - "Ensure stories work in various viewport sizes"
    - "Update stories when component APIs change"

# Icon Library Configuration
icon_library:
  preferred: "lucide-icons"
  configuration:
    package: "@lucide/angular"
    version: "latest"
    import_pattern: "import { Lucide{IconName}Icon } from '@lucide/angular';"

  best_practices:
    - "Use Lucide icons as the primary icon library throughout the application"
    - "Import only the specific icons needed in each component"
    - "Consider using an icon registry service for commonly used icons"
    - "Ensure proper accessibility with aria-label for icon-only buttons"
    - "Maintain consistent icon sizing across the application"
    - "Use appropriate icon colors that maintain sufficient contrast ratios"

  implementation:
    - "Add @lucide/angular to package.json dependencies"
    - "Import LucideAngularModule in shared modules where icons are needed"
    - "Create icon components or directives for frequently used icons"
    - "Document available icons in the project style guide"

# Spartan UI Configuration
spartan_ui:
  enabled: true
  directory: "src/app/shared/spartan-ui"

  # Core principles
  principles:
    - "Minimalist design with focus on functionality"
    - "Performance-first approach with minimal DOM elements"
    - "Accessibility as a fundamental requirement"
    - "Consistent visual language across all components"
    - "Signal-based reactivity for all components"
    - "Mobile-first responsive design"

  # Component architecture
  architecture:
    - "Use standalone components with OnPush change detection"
    - "Implement input signals instead of @Input decorators"
    - "Leverage computed signals for derived properties"
    - "Create effect signals for side effects"
    - "Implement proper cleanup in ngOnDestroy"
    - "Use CSS variables for theming and customization"
    - "Minimize external dependencies"

  # Design system
  design_system:
    # Typography
    typography:
      font_family: "Inter, system-ui, sans-serif"
      base_size: "1rem"
      scale_ratio: 1.25
      weights:
        - 400  # Regular
        - 500  # Medium
        - 600  # Semi-bold
        - 700  # Bold

    # Spacing
    spacing:
      base_unit: "0.25rem"  # 4px
      scale: [0, 1, 2, 3, 4, 5, 6, 8, 10, 12, 16, 20, 24, 32, 40, 48, 64, 80, 96]

    # Elevation
    elevation:
      levels: 5
      properties:
        - "box-shadow"
        - "z-index"

    # Border radius
    border_radius:
      none: "0"
      sm: "0.125rem"  # 2px
      md: "0.25rem"   # 4px
      lg: "0.5rem"    # 8px
      xl: "0.75rem"   # 12px
      full: "9999px"  # Pill shape

  # Component library
  components:
    # Core components
    core:
      - "Button"
      - "Card"
      - "Checkbox"
      - "Divider"
      - "Input"
      - "Radio"
      - "Select"
      - "Switch"
      - "Textarea"
      - "Badge"
      - "Avatar"
      - "Alert"
      - "Toast"
      - "Tooltip"
      - "Modal"
      - "Tabs"

    # Layout components
    layout:
      - "Container"
      - "Grid"
      - "Stack"
      - "Flex"
      - "Spacer"
      - "Divider"

    # Navigation components
    navigation:
      - "Breadcrumb"
      - "Pagination"
      - "Navbar"
      - "Sidebar"
      - "Menu"
      - "Dropdown"

    # Data display components
    data_display:
      - "Table"
      - "List"
      - "Tree"
      - "Timeline"
      - "Stat"
      - "Progress"

  # Component features
  component_features:
    - "Support for light and dark mode"
    - "Responsive design with mobile-first approach"
    - "Keyboard navigation and focus management"
    - "ARIA attributes for accessibility"
    - "CSS variables for theming"
    - "Consistent API across components"
    - "Comprehensive documentation"
    - "Unit and integration tests"
    - "Storybook stories"

  # Best practices
  best_practices:
    - "Use semantic HTML elements"
    - "Implement proper keyboard navigation"
    - "Ensure sufficient color contrast"
    - "Test with screen readers"
    - "Provide meaningful error messages"
    - "Use consistent naming conventions"
    - "Document all component APIs"
    - "Create comprehensive test coverage"
    - "Optimize for performance"
    - "Follow Angular 19 signal-based patterns"

  # Integration with existing UI libraries
  integrations:
    tailwind:
      enabled: true
      strategy: "utility-first"
      custom_config: "tailwind.config.js"

  # Testing requirements
  testing:
    - "Unit tests for all components"
    - "Integration tests for component interactions"
    - "Accessibility tests using axe-core"
    - "Visual regression tests"
    - "Performance benchmarks"

